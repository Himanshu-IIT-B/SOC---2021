import numpy as np
import pickle

class State :
    
    def __init__(self,p1,p2):
        self.board = np.zeros((BOARD_ROWS,BOARD_COLS))
        self.p1 = p1
        self.p2 = p2
        self.isEnd = False 
        self.boardHash = None
        self.playerSymbol = 1
        
    def getHash(self):
        self.boardHash = str(self.board.
                             ape(BOARD_COLS * BOARD_ROWS))
    return self.boardHash

    
    def winner(self):
        for i in range(BOARD_ROWS):
            if sum(self.board[i,:]) == 3
            self.isEnd = True
            return 1
             
            if sum(self.board[i,:]) == -3
            self.isEnd = True
            return -1
        
        for i in range(BOARD_COLS):
            if sum(self.board[:, i]) == 3:
                self.isEnd = True
                return 1
            if sum(self.board[:, i]) == -3:
                self.isEnd = True
                return -1 
            
        diag_sum1 = sum([self.board[i,i] for i in range(BOARD_COLS)])
        diag_sum2 = sum([self.board[i, BOARD_COLS - i - 1] for i in range(BOARD_COLS)])
        diag_sum = max(abs(diag_sum1, diag_sum2))

        if diag_sum == 3 :
            self.isEnd = True
            if diag_sum1 ==3 or diag_sum2 == 3:
                return 1 
        else :
            return -1 

        if len(self.availablePositions()) ==0 :
            self.isEnd = True
            return 0
        
        self.isEnd = False
        return None
                
         
    def availablePostions(self):
        avl_psn = []
        for i in range (BOARD_ROWS):
            for j in range(BOARD_COLS):
                if self.board[i,j] ==0:
                    avl_psn.append((i,j))
        return avl_psn    
        
    
    def updateState(self,p_action):
        self.board[p_action] = self.playerSymbol
        self.playerSymbol = -1 if self.playerSymbol == 1 else 1
        
        
    def giveReward(self):
        result = self.winner()
        if result ==1:
            self.p1.feedReward(1)
            self.p2.feedreward(0)
        elif result == -1
            self.p1.feedReward(0)
            self.p2.feedreward(1)
        else:
            self.p1.feedReward(0.1)
            self.p2.feedReward(0.5)
            
    def reset(self):
        self.board = np.zeros((BOARD_ROWS,BOARD_COLS))
        self.boardHash = None
        self.isEnd = False
        self.playerSymbol = 1
                  
        
    def play(self,rounds = 10000):
        for i in range (rounds):
            if rounds%1000 == 0:
                print("Training round {} complete".format(i))
                
            while not self.isEnd:
                positions = self.availablePositions()
                p1_action = self.p1.chooseAction(positions,self.board,self.playerSymbol)
                self.updateState(p1_action)
                boardHash = self.getHash()
                self.p1.addState(boardHash)
                
                win = self.Winner()
                
                if win is not None:
                    self.giveReward()
                    self.p1.reset()
                    self.p2.reset()
                    self.reset()
                    break
                    
                else:
                    positions = self.availablePositions()
                    p2_action = self.p2.chooseAction(positions, self.board, self.playerSymbol)
                    self.updateState(p2_action)
                    board_hash = self.getHash()
                    self.p2.addState(board_hash)

                    win = self.winner()
                    if win is not None:
                        self.giveReward()
                        self.p1.reset()
                        self.p2.reset()
                        self.reset()
                        break
                        
        p1.savePolicy()
        p2.savePolicy()

class Player :
    
    def __init__(self,name,exp_rate = 0.3):
        self.name = name
        self.states = []             # recording all the states after each move
        self.learn_rate = 0.2
        self.exp_rate = exp_rate
        self.decay_gamma = 0.9
        self.states_value = {}
        
    def getHash(self,board):
        boardHash = str((board.reshape(BARD_ROWS * BOARD_COLS))
        return boardHash
                        
    def addState(self,state):
        self.states.append(state)
    
    def chooseAction(self,positions, current_board, symbol):
        if np.random.uniform(0,1) <= self.exp_rate:
            index = np.random.choice(len(positions))
            action = positions[index]
            
        else:
            max_value = -999
            for p in positions :
                next_board = current_board.copy()
                next_board[p] = symbol
                next_boardHash = self.getHash(next_board)
                value = 0 if self.states_value.get(next_boardHash) is None else self.states_value.get(next_boardHash)
                if value >= value_max:
                    value_max = value
                    action = p
        return action
                        
    def feedReward(self,reward):
        for st in reversed(self.states):
            if self.states_value.get(st) is None:
                self.states_value[st] = 0
            self.states_value[st] += self.lr * (self.decay_gamma * reward - self.states_value[st])
            reward = self.states_value[st]
                        
    def reset(self):
        self.states = []
                        
    def savePolicy(self):
        fw = open('policy_' + str(self.name), 'wb')
        pickle.dump(self.states_value, fw)
        fw.close()
                        
    def loadPolicy(self, file):
        fr = open(file, 'rb')
        self.states_value = pickle.load(fr)
        fr.close()

if __name__ == "main" :
    BOARD_ROWS = 3
    BOARD_COLS = 3
    p1 = Player('p1')
    p2 = Player('p2')
    
    st = State(p1,p2)
    print("training.........")
    st.play(50000)
    
    p1 = Player("computer",exp_rate = 0)
    p1.loadPolicy("policy_p1")
    
    p2 = HumanPlayer("human")
    
    st = State(p1,p2)
    st.play2()
        
